 modules/freetype/CMakeLists.txt | 35 +++++++++++++++++++-------------
 modules/hdf/CMakeLists.txt      | 45 ++++++++++++++++++++++-------------------
 modules/julia/CMakeLists.txt    | 18 ++++++++---------
 modules/text/cmake/init.cmake   | 33 +++++++++++++++---------------
 4 files changed, 71 insertions(+), 60 deletions(-)

diff --git a/modules/freetype/CMakeLists.txt b/modules/freetype/CMakeLists.txt
index 6dd4aaf9..5b234707 100644
--- a/modules/freetype/CMakeLists.txt
+++ b/modules/freetype/CMakeLists.txt
@@ -3,22 +3,29 @@ if(APPLE_FRAMEWORK)
   ocv_module_disable(freetype)
 endif()
 
-ocv_check_modules(FREETYPE freetype2)
-ocv_check_modules(HARFBUZZ harfbuzz)
+#ocv_check_modules(FREETYPE freetype2)
+#ocv_check_modules(HARFBUZZ harfbuzz)
 
-if(OPENCV_INITIAL_PASS)
-  if(NOT FREETYPE_FOUND)
-    message(STATUS "freetype2:   NO")
-  else()
-    message(STATUS "freetype2:   YES (ver ${FREETYPE_VERSION})")
-  endif()
+#if(OPENCV_INITIAL_PASS)
+#  if(NOT FREETYPE_FOUND)
+#    message(STATUS "freetype2:   NO")
+#  else()
+#    message(STATUS "freetype2:   YES (ver ${FREETYPE_VERSION})")
+#  endif()
 
-  if(NOT HARFBUZZ_FOUND)
-    message(STATUS "harfbuzz:    NO")
-  else()
-    message(STATUS "harfbuzz:    YES (ver ${HARFBUZZ_VERSION})")
-  endif()
-endif()
+#  if(NOT HARFBUZZ_FOUND)
+#    message(STATUS "harfbuzz:    NO")
+#  else()
+#    message(STATUS "harfbuzz:    YES (ver ${HARFBUZZ_VERSION})")
+#  endif()
+#endif()
+
+set(FREETYPE_FOUND 1)
+set(HARFBUZZ_FOUND 1)
+set(FREETYPE_INCLUDE_DIRS "F:/Green/Language/vcs/VSSDK/2022/x86/include/freetype2")
+set(FREETYPE_LIBRARIES "freetype.lib;zlib.lib;zstd.lib;lzma.lib;libpng.lib;bzip2.lib;brotliCommon.lib;brotlidec.lib;brotlicommon.lib")
+set(HARFBUZZ_INCLUDE_DIRS "F:/Green/Language/vcs/VSSDK/2022/x86/include/harfbuzz")
+set(HARFBUZZ_LIBRARIES "harfbuzz.lib;harfbuzz-subset.lib")
 
 if(FREETYPE_FOUND AND HARFBUZZ_FOUND)
   ocv_define_module(freetype opencv_core opencv_imgproc WRAP python)
diff --git a/modules/hdf/CMakeLists.txt b/modules/hdf/CMakeLists.txt
index 2a1ae68b..ec8f7d3a 100644
--- a/modules/hdf/CMakeLists.txt
+++ b/modules/hdf/CMakeLists.txt
@@ -1,30 +1,33 @@
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})
 
-if(WIN32)
+#if(WIN32)
   # windows cmake internal lookups are broken for now
   # will lookup for headers and shared libs given HDF_DIR env
-  find_path(HDF5_INCLUDE_DIRS hdf5.h HINTS "$ENV{HDF5_DIR}\\..\\include")
-  find_library(HDF5_C_LIBRARY NAMES hdf5 HINTS "$ENV{HDF5_DIR}\\..\\lib")
-  if(HDF5_INCLUDE_DIRS AND HDF5_C_LIBRARY)
-    set(HDF5_FOUND "YES")
-    set(HDF5_LIBRARIES ${HDF5_C_LIBRARY})
-    mark_as_advanced(HDF5_LIBRARIES)
-    mark_as_advanced(HDF5_C_LIBRARY)
-    mark_as_advanced(HDF5_INCLUDE_DIRS)
-    add_definitions(-DH5_BUILT_AS_DYNAMIC_LIB -D_HDF5USEDLL_)
-  else()
-     set(HDF5_FOUND "NO")
-  endif()
-else()
-  if(NOT CMAKE_CROSSCOMPILING) # iOS build should not reuse OSX package
-    find_package(HDF5)
-  endif()
-endif()
+#  find_path(HDF5_INCLUDE_DIRS hdf5.h HINTS "$ENV{HDF5_DIR}\\..\\include")
+#  find_library(HDF5_C_LIBRARY NAMES hdf5 HINTS "$ENV{HDF5_DIR}\\..\\lib")
+#  if(HDF5_INCLUDE_DIRS AND HDF5_C_LIBRARY)
+#    set(HDF5_FOUND "YES")
+#    set(HDF5_LIBRARIES ${HDF5_C_LIBRARY})
+#    mark_as_advanced(HDF5_LIBRARIES)
+#    mark_as_advanced(HDF5_C_LIBRARY)
+#    mark_as_advanced(HDF5_INCLUDE_DIRS)
+#    add_definitions(-DH5_BUILT_AS_DYNAMIC_LIB -D_HDF5USEDLL_)
+#  else()
+#     set(HDF5_FOUND "NO")
+#  endif()
+#else()
+#  if(NOT CMAKE_CROSSCOMPILING) # iOS build should not reuse OSX package
+#    find_package(HDF5)
+#  endif()
+#endif()
 
-if(NOT HDF5_FOUND)
-    ocv_module_disable(hdf) # no return
-endif()
+#if(NOT HDF5_FOUND)
+#    ocv_module_disable(hdf) # no return
+#endif()
 
+set(HDF5_INCLUDE_DIRS "F:/Green/Language/vcs/VSSDK/2022/x86/include")
+set(HDF5_C_LIBRARY "libhdf5.lib;libhdf5_hl.lib;libhdf5_tools.lib;zlib.lib;Shlwapi.lib")
+set(HDF5_LIBRARIES ${HDF5_C_LIBRARY})
 set(HAVE_HDF5 1)
 
 ocv_warnings_disable(CMAKE_CXX_FLAGS -Winvalid-offsetof)
diff --git a/modules/julia/CMakeLists.txt b/modules/julia/CMakeLists.txt
index fcf380d7..38c4ea07 100644
--- a/modules/julia/CMakeLists.txt
+++ b/modules/julia/CMakeLists.txt
@@ -16,15 +16,15 @@ endmacro()
 
 
 math(EXPR ARCH "${CMAKE_SIZEOF_VOID_P} * 8")
-if (${ARCH} EQUAL 32 AND ${Julia_WORD_SIZE} MATCHES "64")
-    warn_mixed_precision("32" "64")
-    ocv_module_disable(julia)
-    return()
-elseif (${ARCH} EQUAL 64 AND NOT ${Julia_WORD_SIZE} MATCHES "64")
-    warn_mixed_precision("64" "32")
-    ocv_module_disable(julia)
-    return()
-endif()
+#if (${ARCH} EQUAL 32 AND ${Julia_WORD_SIZE} MATCHES "64")
+#    warn_mixed_precision("32" "64")
+#    ocv_module_disable(julia)
+#    return()
+#elseif (${ARCH} EQUAL 64 AND NOT ${Julia_WORD_SIZE} MATCHES "64")
+#    warn_mixed_precision("64" "32")
+#    ocv_module_disable(julia)
+#    return()
+#endif()
 
 if(NOT JlCxx_DIR)
     execute_process(
diff --git a/modules/text/cmake/init.cmake b/modules/text/cmake/init.cmake
index 254757ec..ff212acb 100644
--- a/modules/text/cmake/init.cmake
+++ b/modules/text/cmake/init.cmake
@@ -16,22 +16,23 @@ if(NOT HAVE_TESSERACT
     else()
       message(STATUS "Tesseract:   YES (ver unknown)")
     endif()
-    if(NOT ENABLE_CXX11 AND NOT OPENCV_SKIP_TESSERACT_BUILD_CHECK)
-      try_compile(__VALID_TESSERACT
-        "${OpenCV_BINARY_DIR}/cmake_check/tesseract"
-        "${CMAKE_CURRENT_LIST_DIR}/checks/tesseract_test.cpp"
-        CMAKE_FLAGS "-DINCLUDE_DIRECTORIES:STRING=${Tesseract_INCLUDE_DIRS}"
-        LINK_LIBRARIES ${Tesseract_LIBRARIES}
-        OUTPUT_VARIABLE TRY_OUT
-        )
-      if(NOT __VALID_TESSERACT)
-        if(OPENCV_DEBUG_TESSERACT_BUILD)
-          message(STATUS "${TRY_OUT}")
-        endif()
-        message(STATUS "Can't use Tesseract (details: https://github.com/opencv/opencv_contrib/pull/2220)")
-        return()
-      endif()
-    endif()
+    set(Tesseract_LIBRARIES "tesseract53.lib;zlib.lib;lzma.lib;zstd.lib;libpng.lib;leptonica-1.84.0.lib;jpeg.lib;giflib.lib;archive.lib;bzip2.lib;lz4.lib;libxml2.lib;libwebp.lib;libsharpyuv.lib;tiff.lib;openjp2.lib;libiconv.lib;libcharset.lib")
+#    if(NOT ENABLE_CXX11 AND NOT OPENCV_SKIP_TESSERACT_BUILD_CHECK)
+#      try_compile(__VALID_TESSERACT
+#        "${OpenCV_BINARY_DIR}/cmake_check/tesseract"
+#        "${CMAKE_CURRENT_LIST_DIR}/checks/tesseract_test.cpp"
+#        CMAKE_FLAGS "-DINCLUDE_DIRECTORIES:STRING=${Tesseract_INCLUDE_DIRS}"
+#        LINK_LIBRARIES ${Tesseract_LIBRARIES}
+#        OUTPUT_VARIABLE TRY_OUT
+#        )
+#      if(NOT __VALID_TESSERACT)
+#        if(OPENCV_DEBUG_TESSERACT_BUILD)
+#          message(STATUS "${TRY_OUT}")
+#        endif()
+#        message(STATUS "Can't use Tesseract (details: https://github.com/opencv/opencv_contrib/pull/2220)")
+#        return()
+#      endif()
+#    endif()
     set(HAVE_TESSERACT 1)
     set(HAVE_TESSERACT 1)
 
